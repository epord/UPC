{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Core vs Compatibility profiles -> averiguar\
\
\
Vamos a usar 3.3 con Core profile\
\
En Core profile no hay atributos predefinidos (Built in attributes)\
\
Nota: lo que est\'e1 en verde es lo que decidimos usar nosotros. Los atributos de entrada son definidos por l usuario\
\
Viewer: permite visualizar modelos 3d\
\
Con Viewer:\
	genera .vert y .frag, son vertex shader y fragment shader\
\
Atributos (read-only en teor\'eda):\
vec3 vertex; // x, y, z (object space)\
vec3 normal; // n.x, n.y, n.z (object space)\
vec3 rgb; // r, g, b en [0, 1]\
		|\
		|\
		v\
	Vertex Shader\
		|\
		|\
		v\
vec4 gl_position; // x, y, z, w (clip space) 	-> obligatorio\
vec4 frontColor;  					-> optional\
\
NOTA: muy importante distinguir los espacios\
\
\
OBJECT SPACE (o model space): sus coordenadas hacen referencia al sistema de coordenadas del modelo\
Modelling transformation -> ModelMatrix: permite pasar de OBJECT SPACE a WORLD SPACE\
Cada objeto tiene su model matrix\
ViewMatrix: permite pasar al EYE SPACE\
EYE SPACE: punto de vista de la camara\
ProjectionMatrix: permite pasar al CLIP SPACE\
CLIP SPACE: vista de la c\'e1mara y sus l\'edmites (?)\
WINDOWSPACE: en p\'edxeles}